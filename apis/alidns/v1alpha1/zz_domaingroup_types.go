// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DomainGroupInitParameters struct {

	// The Name of the domain group. The domain_group_name is required when the value of the group_name  is Empty.
	DomainGroupName *string `json:"domainGroupName,omitempty" tf:"domain_group_name,omitempty"`

	// User language.
	Lang *string `json:"lang,omitempty" tf:"lang,omitempty"`
}

type DomainGroupObservation struct {

	// The Name of the domain group. The domain_group_name is required when the value of the group_name  is Empty.
	DomainGroupName *string `json:"domainGroupName,omitempty" tf:"domain_group_name,omitempty"`

	// This ID of this domain group resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// User language.
	Lang *string `json:"lang,omitempty" tf:"lang,omitempty"`
}

type DomainGroupParameters struct {

	// The Name of the domain group. The domain_group_name is required when the value of the group_name  is Empty.
	// +kubebuilder:validation:Optional
	DomainGroupName *string `json:"domainGroupName,omitempty" tf:"domain_group_name,omitempty"`

	// User language.
	// +kubebuilder:validation:Optional
	Lang *string `json:"lang,omitempty" tf:"lang,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`
}

// DomainGroupSpec defines the desired state of DomainGroup
type DomainGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DomainGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DomainGroupInitParameters `json:"initProvider,omitempty"`
}

// DomainGroupStatus defines the observed state of DomainGroup.
type DomainGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DomainGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DomainGroup is the Schema for the DomainGroups API. Provides a Alidns Domain Group resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type DomainGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DomainGroupSpec   `json:"spec"`
	Status            DomainGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DomainGroupList contains a list of DomainGroups
type DomainGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DomainGroup `json:"items"`
}

// Repository type metadata.
var (
	DomainGroup_Kind             = "DomainGroup"
	DomainGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DomainGroup_Kind}.String()
	DomainGroup_KindAPIVersion   = DomainGroup_Kind + "." + CRDGroupVersion.String()
	DomainGroup_GroupVersionKind = CRDGroupVersion.WithKind(DomainGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&DomainGroup{}, &DomainGroupList{})
}
