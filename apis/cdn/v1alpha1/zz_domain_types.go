// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CertificateConfigInitParameters struct {

	// The ID of the certificate. It takes effect only when CertType = cas.
	CertID *string `json:"certId,omitempty" tf:"cert_id,omitempty"`

	// Certificate name, only flyer names are supported.
	CertName *string `json:"certName,omitempty" tf:"cert_name,omitempty"`

	// The certificate region, which takes effect only when CertType = cas, supports cn-hangzhou (domestic) and ap-southeast-1 (International), and is cn-hangzhou by default.
	CertRegion *string `json:"certRegion,omitempty" tf:"cert_region,omitempty"`

	// Certificate type. Value:
	CertType *string `json:"certType,omitempty" tf:"cert_type,omitempty"`

	// The content of the private key. If the certificate is not enabled, you do not need to enter the content of the private key. To configure the certificate, enter the content of the private key.
	PrivateKeySecretRef *v1.SecretKeySelector `json:"privateKeySecretRef,omitempty" tf:"-"`

	// The content of the security certificate. If the certificate is not enabled, you do not need to enter the content of the security certificate. Please enter the content of the certificate to configure the certificate.
	ServerCertificateSecretRef *v1.SecretKeySelector `json:"serverCertificateSecretRef,omitempty" tf:"-"`

	// Whether the HTTPS certificate is enabled. Value:
	ServerCertificateStatus *string `json:"serverCertificateStatus,omitempty" tf:"server_certificate_status,omitempty"`
}

type CertificateConfigObservation struct {

	// The ID of the certificate. It takes effect only when CertType = cas.
	CertID *string `json:"certId,omitempty" tf:"cert_id,omitempty"`

	// Certificate name, only flyer names are supported.
	CertName *string `json:"certName,omitempty" tf:"cert_name,omitempty"`

	// The certificate region, which takes effect only when CertType = cas, supports cn-hangzhou (domestic) and ap-southeast-1 (International), and is cn-hangzhou by default.
	CertRegion *string `json:"certRegion,omitempty" tf:"cert_region,omitempty"`

	// Certificate type. Value:
	CertType *string `json:"certType,omitempty" tf:"cert_type,omitempty"`

	// Whether the HTTPS certificate is enabled. Value:
	ServerCertificateStatus *string `json:"serverCertificateStatus,omitempty" tf:"server_certificate_status,omitempty"`
}

type CertificateConfigParameters struct {

	// The ID of the certificate. It takes effect only when CertType = cas.
	// +kubebuilder:validation:Optional
	CertID *string `json:"certId,omitempty" tf:"cert_id,omitempty"`

	// Certificate name, only flyer names are supported.
	// +kubebuilder:validation:Optional
	CertName *string `json:"certName,omitempty" tf:"cert_name,omitempty"`

	// The certificate region, which takes effect only when CertType = cas, supports cn-hangzhou (domestic) and ap-southeast-1 (International), and is cn-hangzhou by default.
	// +kubebuilder:validation:Optional
	CertRegion *string `json:"certRegion,omitempty" tf:"cert_region,omitempty"`

	// Certificate type. Value:
	// +kubebuilder:validation:Optional
	CertType *string `json:"certType,omitempty" tf:"cert_type,omitempty"`

	// The content of the private key. If the certificate is not enabled, you do not need to enter the content of the private key. To configure the certificate, enter the content of the private key.
	// +kubebuilder:validation:Optional
	PrivateKeySecretRef *v1.SecretKeySelector `json:"privateKeySecretRef,omitempty" tf:"-"`

	// The content of the security certificate. If the certificate is not enabled, you do not need to enter the content of the security certificate. Please enter the content of the certificate to configure the certificate.
	// +kubebuilder:validation:Optional
	ServerCertificateSecretRef *v1.SecretKeySelector `json:"serverCertificateSecretRef,omitempty" tf:"-"`

	// Whether the HTTPS certificate is enabled. Value:
	// +kubebuilder:validation:Optional
	ServerCertificateStatus *string `json:"serverCertificateStatus,omitempty" tf:"server_certificate_status,omitempty"`
}

type DomainInitParameters struct {

	// Cdn type of the accelerated domain. Valid values are web, download, video.
	CdnType *string `json:"cdnType,omitempty" tf:"cdn_type,omitempty"`

	// Certificate configuration See certificate_config below.
	CertificateConfig []CertificateConfigInitParameters `json:"certificateConfig,omitempty" tf:"certificate_config,omitempty"`

	// Health test URL.
	CheckURL *string `json:"checkUrl,omitempty" tf:"check_url,omitempty"`

	// Name of the accelerated domain. This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or "-", and must not begin or end with "-", and "-" must not in the 3th and 4th character positions at the same time. Suffix .sh and .tel are not supported.
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// Whether to issue a certificate in grayscale. Value: staging: issued certificate in grayscale. Not passing or passing any other value is a formal certificate.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// The ID of the resource group.
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// Scope of the accelerated domain. Valid values are domestic, overseas, global. Default value is domestic. This parameter's setting is valid Only for the international users and domestic L3 and above users. Value:
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// The source address list of the accelerated domain. Defaults to null. See sources below.
	Sources []SourcesInitParameters `json:"sources,omitempty" tf:"sources,omitempty"`

	// The status of the resource, valid values: online, offline.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type DomainObservation struct {

	// Cdn type of the accelerated domain. Valid values are web, download, video.
	CdnType *string `json:"cdnType,omitempty" tf:"cdn_type,omitempty"`

	// Certificate configuration See certificate_config below.
	CertificateConfig []CertificateConfigObservation `json:"certificateConfig,omitempty" tf:"certificate_config,omitempty"`

	// Health test URL.
	CheckURL *string `json:"checkUrl,omitempty" tf:"check_url,omitempty"`

	// The CNAME domain name corresponding to the accelerated domain name.
	Cname *string `json:"cname,omitempty" tf:"cname,omitempty"`

	// Name of the accelerated domain. This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or "-", and must not begin or end with "-", and "-" must not in the 3th and 4th character positions at the same time. Suffix .sh and .tel are not supported.
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// Whether to issue a certificate in grayscale. Value: staging: issued certificate in grayscale. Not passing or passing any other value is a formal certificate.
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// The ID of the resource supplied above. It is the same as the domain_name.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The ID of the resource group.
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// Scope of the accelerated domain. Valid values are domestic, overseas, global. Default value is domestic. This parameter's setting is valid Only for the international users and domestic L3 and above users. Value:
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// The source address list of the accelerated domain. Defaults to null. See sources below.
	Sources []SourcesObservation `json:"sources,omitempty" tf:"sources,omitempty"`

	// The status of the resource, valid values: online, offline.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type DomainParameters struct {

	// Cdn type of the accelerated domain. Valid values are web, download, video.
	// +kubebuilder:validation:Optional
	CdnType *string `json:"cdnType,omitempty" tf:"cdn_type,omitempty"`

	// Certificate configuration See certificate_config below.
	// +kubebuilder:validation:Optional
	CertificateConfig []CertificateConfigParameters `json:"certificateConfig,omitempty" tf:"certificate_config,omitempty"`

	// Health test URL.
	// +kubebuilder:validation:Optional
	CheckURL *string `json:"checkUrl,omitempty" tf:"check_url,omitempty"`

	// Name of the accelerated domain. This name without suffix can have a string of 1 to 63 characters, must contain only alphanumeric characters or "-", and must not begin or end with "-", and "-" must not in the 3th and 4th character positions at the same time. Suffix .sh and .tel are not supported.
	// +kubebuilder:validation:Optional
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// Whether to issue a certificate in grayscale. Value: staging: issued certificate in grayscale. Not passing or passing any other value is a formal certificate.
	// +kubebuilder:validation:Optional
	Env *string `json:"env,omitempty" tf:"env,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`

	// The ID of the resource group.
	// +kubebuilder:validation:Optional
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// Scope of the accelerated domain. Valid values are domestic, overseas, global. Default value is domestic. This parameter's setting is valid Only for the international users and domestic L3 and above users. Value:
	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// The source address list of the accelerated domain. Defaults to null. See sources below.
	// +kubebuilder:validation:Optional
	Sources []SourcesParameters `json:"sources,omitempty" tf:"sources,omitempty"`

	// The status of the resource, valid values: online, offline.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type SourcesInitParameters struct {

	// The address of source. Valid values can be ip or doaminName. Each item's content can not be repeated.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// The port of source. Valid values are 443 and 80. Default value is 80.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Priority of the source. Valid values are 0 and 100. Default value is 20.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// The type of the source. Valid values are ipaddr, domain and oss.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Weight of the source. Valid values are from 0 to 100. Default value is 10, but if type is ipaddr, the value can only be 10.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type SourcesObservation struct {

	// The address of source. Valid values can be ip or doaminName. Each item's content can not be repeated.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// The port of source. Valid values are 443 and 80. Default value is 80.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Priority of the source. Valid values are 0 and 100. Default value is 20.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// The type of the source. Valid values are ipaddr, domain and oss.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Weight of the source. Valid values are from 0 to 100. Default value is 10, but if type is ipaddr, the value can only be 10.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type SourcesParameters struct {

	// The address of source. Valid values can be ip or doaminName. Each item's content can not be repeated.
	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// The port of source. Valid values are 443 and 80. Default value is 80.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Priority of the source. Valid values are 0 and 100. Default value is 20.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// The type of the source. Valid values are ipaddr, domain and oss.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Weight of the source. Valid values are from 0 to 100. Default value is 10, but if type is ipaddr, the value can only be 10.
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

// DomainSpec defines the desired state of Domain
type DomainSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DomainParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DomainInitParameters `json:"initProvider,omitempty"`
}

// DomainStatus defines the observed state of Domain.
type DomainStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DomainObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Domain is the Schema for the Domains API. Provides a Alicloud CDN Domain resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type Domain struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cdnType) || (has(self.initProvider) && has(self.initProvider.cdnType))",message="spec.forProvider.cdnType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.domainName) || (has(self.initProvider) && has(self.initProvider.domainName))",message="spec.forProvider.domainName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sources) || (has(self.initProvider) && has(self.initProvider.sources))",message="spec.forProvider.sources is a required parameter"
	Spec   DomainSpec   `json:"spec"`
	Status DomainStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DomainList contains a list of Domains
type DomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Domain `json:"items"`
}

// Repository type metadata.
var (
	Domain_Kind             = "Domain"
	Domain_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Domain_Kind}.String()
	Domain_KindAPIVersion   = Domain_Kind + "." + CRDGroupVersion.String()
	Domain_GroupVersionKind = CRDGroupVersion.WithKind(Domain_Kind)
)

func init() {
	SchemeBuilder.Register(&Domain{}, &DomainList{})
}
