// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HealthCheckTemplateInitParameters struct {

	// Whether to precheck the API request.
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// The HTTP status codes that are used to indicate whether the backend server passes the health check. Default value: http_2xx. Valid values: http_2xx, http_3xx, http_4xx, and http_5xx. NOTE: health_check_codes takes effect only if health_check_protocol is set to HTTP.
	HealthCheckCodes []*string `json:"healthCheckCodes,omitempty" tf:"health_check_codes,omitempty"`

	// The port that is used for health checks. Default value: 0. Valid values: 0 to 65535.
	HealthCheckConnectPort *float64 `json:"healthCheckConnectPort,omitempty" tf:"health_check_connect_port,omitempty"`

	// The version of the HTTP protocol. Default value: HTTP1.1. Valid values: HTTP1.0, HTTP1.1. NOTE: health_check_http_version takes effect only if health_check_protocol is set to HTTP.
	HealthCheckHTTPVersion *string `json:"healthCheckHttpVersion,omitempty" tf:"health_check_http_version,omitempty"`

	// The domain name that is used for health checks. NOTE: health_check_host takes effect only if health_check_protocol is set to HTTP.
	HealthCheckHost *string `json:"healthCheckHost,omitempty" tf:"health_check_host,omitempty"`

	// The interval at which health checks are performed. Unit: seconds. Default value: 2. Valid values: 1 to 50.
	HealthCheckInterval *float64 `json:"healthCheckInterval,omitempty" tf:"health_check_interval,omitempty"`

	// The HTTP method that is used for health checks. Default value: HEAD. Valid values: HEAD, GET. NOTE: health_check_method takes effect only if health_check_protocol is set to HTTP.
	HealthCheckMethod *string `json:"healthCheckMethod,omitempty" tf:"health_check_method,omitempty"`

	// The URL that is used for health checks. NOTE: health_check_path takes effect only if health_check_protocol is set to HTTP.
	HealthCheckPath *string `json:"healthCheckPath,omitempty" tf:"health_check_path,omitempty"`

	// The protocol that is used for health checks. Default value: HTTP. Valid values: HTTP, TCP.
	HealthCheckProtocol *string `json:"healthCheckProtocol,omitempty" tf:"health_check_protocol,omitempty"`

	// The name of the health check template. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
	HealthCheckTemplateName *string `json:"healthCheckTemplateName,omitempty" tf:"health_check_template_name,omitempty"`

	// The timeout period of a health check. Default value: 5. Valid values: 1 to 300.
	HealthCheckTimeout *float64 `json:"healthCheckTimeout,omitempty" tf:"health_check_timeout,omitempty"`

	// The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. Default value: 3. Valid values: 2 to 10.
	HealthyThreshold *float64 `json:"healthyThreshold,omitempty" tf:"healthy_threshold,omitempty"`

	// The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. Default value: 3. Valid values: 2 to 10.
	UnhealthyThreshold *float64 `json:"unhealthyThreshold,omitempty" tf:"unhealthy_threshold,omitempty"`
}

type HealthCheckTemplateObservation struct {

	// Whether to precheck the API request.
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// The HTTP status codes that are used to indicate whether the backend server passes the health check. Default value: http_2xx. Valid values: http_2xx, http_3xx, http_4xx, and http_5xx. NOTE: health_check_codes takes effect only if health_check_protocol is set to HTTP.
	HealthCheckCodes []*string `json:"healthCheckCodes,omitempty" tf:"health_check_codes,omitempty"`

	// The port that is used for health checks. Default value: 0. Valid values: 0 to 65535.
	HealthCheckConnectPort *float64 `json:"healthCheckConnectPort,omitempty" tf:"health_check_connect_port,omitempty"`

	// The version of the HTTP protocol. Default value: HTTP1.1. Valid values: HTTP1.0, HTTP1.1. NOTE: health_check_http_version takes effect only if health_check_protocol is set to HTTP.
	HealthCheckHTTPVersion *string `json:"healthCheckHttpVersion,omitempty" tf:"health_check_http_version,omitempty"`

	// The domain name that is used for health checks. NOTE: health_check_host takes effect only if health_check_protocol is set to HTTP.
	HealthCheckHost *string `json:"healthCheckHost,omitempty" tf:"health_check_host,omitempty"`

	// The interval at which health checks are performed. Unit: seconds. Default value: 2. Valid values: 1 to 50.
	HealthCheckInterval *float64 `json:"healthCheckInterval,omitempty" tf:"health_check_interval,omitempty"`

	// The HTTP method that is used for health checks. Default value: HEAD. Valid values: HEAD, GET. NOTE: health_check_method takes effect only if health_check_protocol is set to HTTP.
	HealthCheckMethod *string `json:"healthCheckMethod,omitempty" tf:"health_check_method,omitempty"`

	// The URL that is used for health checks. NOTE: health_check_path takes effect only if health_check_protocol is set to HTTP.
	HealthCheckPath *string `json:"healthCheckPath,omitempty" tf:"health_check_path,omitempty"`

	// The protocol that is used for health checks. Default value: HTTP. Valid values: HTTP, TCP.
	HealthCheckProtocol *string `json:"healthCheckProtocol,omitempty" tf:"health_check_protocol,omitempty"`

	// The name of the health check template. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
	HealthCheckTemplateName *string `json:"healthCheckTemplateName,omitempty" tf:"health_check_template_name,omitempty"`

	// The timeout period of a health check. Default value: 5. Valid values: 1 to 300.
	HealthCheckTimeout *float64 `json:"healthCheckTimeout,omitempty" tf:"health_check_timeout,omitempty"`

	// The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. Default value: 3. Valid values: 2 to 10.
	HealthyThreshold *float64 `json:"healthyThreshold,omitempty" tf:"healthy_threshold,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. Default value: 3. Valid values: 2 to 10.
	UnhealthyThreshold *float64 `json:"unhealthyThreshold,omitempty" tf:"unhealthy_threshold,omitempty"`
}

type HealthCheckTemplateParameters struct {

	// Whether to precheck the API request.
	// +kubebuilder:validation:Optional
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// The HTTP status codes that are used to indicate whether the backend server passes the health check. Default value: http_2xx. Valid values: http_2xx, http_3xx, http_4xx, and http_5xx. NOTE: health_check_codes takes effect only if health_check_protocol is set to HTTP.
	// +kubebuilder:validation:Optional
	HealthCheckCodes []*string `json:"healthCheckCodes,omitempty" tf:"health_check_codes,omitempty"`

	// The port that is used for health checks. Default value: 0. Valid values: 0 to 65535.
	// +kubebuilder:validation:Optional
	HealthCheckConnectPort *float64 `json:"healthCheckConnectPort,omitempty" tf:"health_check_connect_port,omitempty"`

	// The version of the HTTP protocol. Default value: HTTP1.1. Valid values: HTTP1.0, HTTP1.1. NOTE: health_check_http_version takes effect only if health_check_protocol is set to HTTP.
	// +kubebuilder:validation:Optional
	HealthCheckHTTPVersion *string `json:"healthCheckHttpVersion,omitempty" tf:"health_check_http_version,omitempty"`

	// The domain name that is used for health checks. NOTE: health_check_host takes effect only if health_check_protocol is set to HTTP.
	// +kubebuilder:validation:Optional
	HealthCheckHost *string `json:"healthCheckHost,omitempty" tf:"health_check_host,omitempty"`

	// The interval at which health checks are performed. Unit: seconds. Default value: 2. Valid values: 1 to 50.
	// +kubebuilder:validation:Optional
	HealthCheckInterval *float64 `json:"healthCheckInterval,omitempty" tf:"health_check_interval,omitempty"`

	// The HTTP method that is used for health checks. Default value: HEAD. Valid values: HEAD, GET. NOTE: health_check_method takes effect only if health_check_protocol is set to HTTP.
	// +kubebuilder:validation:Optional
	HealthCheckMethod *string `json:"healthCheckMethod,omitempty" tf:"health_check_method,omitempty"`

	// The URL that is used for health checks. NOTE: health_check_path takes effect only if health_check_protocol is set to HTTP.
	// +kubebuilder:validation:Optional
	HealthCheckPath *string `json:"healthCheckPath,omitempty" tf:"health_check_path,omitempty"`

	// The protocol that is used for health checks. Default value: HTTP. Valid values: HTTP, TCP.
	// +kubebuilder:validation:Optional
	HealthCheckProtocol *string `json:"healthCheckProtocol,omitempty" tf:"health_check_protocol,omitempty"`

	// The name of the health check template. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
	// +kubebuilder:validation:Optional
	HealthCheckTemplateName *string `json:"healthCheckTemplateName,omitempty" tf:"health_check_template_name,omitempty"`

	// The timeout period of a health check. Default value: 5. Valid values: 1 to 300.
	// +kubebuilder:validation:Optional
	HealthCheckTimeout *float64 `json:"healthCheckTimeout,omitempty" tf:"health_check_timeout,omitempty"`

	// The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy. Default value: 3. Valid values: 2 to 10.
	// +kubebuilder:validation:Optional
	HealthyThreshold *float64 `json:"healthyThreshold,omitempty" tf:"healthy_threshold,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`

	// The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy. Default value: 3. Valid values: 2 to 10.
	// +kubebuilder:validation:Optional
	UnhealthyThreshold *float64 `json:"unhealthyThreshold,omitempty" tf:"unhealthy_threshold,omitempty"`
}

// HealthCheckTemplateSpec defines the desired state of HealthCheckTemplate
type HealthCheckTemplateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HealthCheckTemplateParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider HealthCheckTemplateInitParameters `json:"initProvider,omitempty"`
}

// HealthCheckTemplateStatus defines the observed state of HealthCheckTemplate.
type HealthCheckTemplateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HealthCheckTemplateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// HealthCheckTemplate is the Schema for the HealthCheckTemplates API. Provides a Alicloud Application Load Balancer (ALB) Health Check Template resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type HealthCheckTemplate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.healthCheckTemplateName) || (has(self.initProvider) && has(self.initProvider.healthCheckTemplateName))",message="spec.forProvider.healthCheckTemplateName is a required parameter"
	Spec   HealthCheckTemplateSpec   `json:"spec"`
	Status HealthCheckTemplateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HealthCheckTemplateList contains a list of HealthCheckTemplates
type HealthCheckTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HealthCheckTemplate `json:"items"`
}

// Repository type metadata.
var (
	HealthCheckTemplate_Kind             = "HealthCheckTemplate"
	HealthCheckTemplate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HealthCheckTemplate_Kind}.String()
	HealthCheckTemplate_KindAPIVersion   = HealthCheckTemplate_Kind + "." + CRDGroupVersion.String()
	HealthCheckTemplate_GroupVersionKind = CRDGroupVersion.WithKind(HealthCheckTemplate_Kind)
)

func init() {
	SchemeBuilder.Register(&HealthCheckTemplate{}, &HealthCheckTemplateList{})
}
