// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VPCEndpointServiceInitParameters struct {

	// The IP address version.
	AddressIPVersion *string `json:"addressIpVersion,omitempty" tf:"address_ip_version,omitempty"`

	// Indicates whether the endpoint service automatically accepts endpoint connection requests. Valid values:
	AutoAcceptConnection *bool `json:"autoAcceptConnection,omitempty" tf:"auto_accept_connection,omitempty"`

	// The default bandwidth of the endpoint connection. Valid values: 100 to 10240. Unit: Mbit/s.
	ConnectBandwidth *float64 `json:"connectBandwidth,omitempty" tf:"connect_bandwidth,omitempty"`

	// Specifies whether to perform only a dry run, without performing the actual request.
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// The payer of the endpoint service. Valid values:
	Payer *string `json:"payer,omitempty" tf:"payer,omitempty"`

	// The resource group ID.
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// The description of the endpoint service.
	ServiceDescription *string `json:"serviceDescription,omitempty" tf:"service_description,omitempty"`

	// Service resource type, value:
	ServiceResourceType *string `json:"serviceResourceType,omitempty" tf:"service_resource_type,omitempty"`

	// Specifies whether to enable IPv6 for the endpoint service. Valid values:
	ServiceSupportIPv6 *bool `json:"serviceSupportIpv6,omitempty" tf:"service_support_ipv6,omitempty"`

	// The list of tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies whether to first resolve the domain name of the nearest endpoint that is associated with the endpoint service. Valid values:
	ZoneAffinityEnabled *bool `json:"zoneAffinityEnabled,omitempty" tf:"zone_affinity_enabled,omitempty"`
}

type VPCEndpointServiceObservation struct {

	// The IP address version.
	AddressIPVersion *string `json:"addressIpVersion,omitempty" tf:"address_ip_version,omitempty"`

	// Indicates whether the endpoint service automatically accepts endpoint connection requests. Valid values:
	AutoAcceptConnection *bool `json:"autoAcceptConnection,omitempty" tf:"auto_accept_connection,omitempty"`

	// The default bandwidth of the endpoint connection. Valid values: 100 to 10240. Unit: Mbit/s.
	ConnectBandwidth *float64 `json:"connectBandwidth,omitempty" tf:"connect_bandwidth,omitempty"`

	// The time when the endpoint service was created.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Specifies whether to perform only a dry run, without performing the actual request.
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// The ID of the resource supplied above.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The payer of the endpoint service. Valid values:
	Payer *string `json:"payer,omitempty" tf:"payer,omitempty"`

	// (Available since v1.235.0) The ID of the region to which the endpoint service belongs.
	RegionID *string `json:"regionId,omitempty" tf:"region_id,omitempty"`

	// The resource group ID.
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// The service state of the endpoint service.
	ServiceBusinessStatus *string `json:"serviceBusinessStatus,omitempty" tf:"service_business_status,omitempty"`

	// The description of the endpoint service.
	ServiceDescription *string `json:"serviceDescription,omitempty" tf:"service_description,omitempty"`

	// The domain name of the endpoint service.
	ServiceDomain *string `json:"serviceDomain,omitempty" tf:"service_domain,omitempty"`

	// Service resource type, value:
	ServiceResourceType *string `json:"serviceResourceType,omitempty" tf:"service_resource_type,omitempty"`

	// Specifies whether to enable IPv6 for the endpoint service. Valid values:
	ServiceSupportIPv6 *bool `json:"serviceSupportIpv6,omitempty" tf:"service_support_ipv6,omitempty"`

	// The state of the endpoint service.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The list of tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The name of the endpoint service.
	VPCEndpointServiceName *string `json:"vpcEndpointServiceName,omitempty" tf:"vpc_endpoint_service_name,omitempty"`

	// Specifies whether to first resolve the domain name of the nearest endpoint that is associated with the endpoint service. Valid values:
	ZoneAffinityEnabled *bool `json:"zoneAffinityEnabled,omitempty" tf:"zone_affinity_enabled,omitempty"`
}

type VPCEndpointServiceParameters struct {

	// The IP address version.
	// +kubebuilder:validation:Optional
	AddressIPVersion *string `json:"addressIpVersion,omitempty" tf:"address_ip_version,omitempty"`

	// Indicates whether the endpoint service automatically accepts endpoint connection requests. Valid values:
	// +kubebuilder:validation:Optional
	AutoAcceptConnection *bool `json:"autoAcceptConnection,omitempty" tf:"auto_accept_connection,omitempty"`

	// The default bandwidth of the endpoint connection. Valid values: 100 to 10240. Unit: Mbit/s.
	// +kubebuilder:validation:Optional
	ConnectBandwidth *float64 `json:"connectBandwidth,omitempty" tf:"connect_bandwidth,omitempty"`

	// Specifies whether to perform only a dry run, without performing the actual request.
	// +kubebuilder:validation:Optional
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// The payer of the endpoint service. Valid values:
	// +kubebuilder:validation:Optional
	Payer *string `json:"payer,omitempty" tf:"payer,omitempty"`

	// The resource group ID.
	// +kubebuilder:validation:Optional
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// The description of the endpoint service.
	// +kubebuilder:validation:Optional
	ServiceDescription *string `json:"serviceDescription,omitempty" tf:"service_description,omitempty"`

	// Service resource type, value:
	// +kubebuilder:validation:Optional
	ServiceResourceType *string `json:"serviceResourceType,omitempty" tf:"service_resource_type,omitempty"`

	// Specifies whether to enable IPv6 for the endpoint service. Valid values:
	// +kubebuilder:validation:Optional
	ServiceSupportIPv6 *bool `json:"serviceSupportIpv6,omitempty" tf:"service_support_ipv6,omitempty"`

	// The list of tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Specifies whether to first resolve the domain name of the nearest endpoint that is associated with the endpoint service. Valid values:
	// +kubebuilder:validation:Optional
	ZoneAffinityEnabled *bool `json:"zoneAffinityEnabled,omitempty" tf:"zone_affinity_enabled,omitempty"`
}

// VPCEndpointServiceSpec defines the desired state of VPCEndpointService
type VPCEndpointServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VPCEndpointServiceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VPCEndpointServiceInitParameters `json:"initProvider,omitempty"`
}

// VPCEndpointServiceStatus defines the observed state of VPCEndpointService.
type VPCEndpointServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VPCEndpointServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VPCEndpointService is the Schema for the VPCEndpointServices API. Provides a Alicloud Private Link Vpc Endpoint Service resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloud}
type VPCEndpointService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VPCEndpointServiceSpec   `json:"spec"`
	Status            VPCEndpointServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPCEndpointServiceList contains a list of VPCEndpointServices
type VPCEndpointServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPCEndpointService `json:"items"`
}

// Repository type metadata.
var (
	VPCEndpointService_Kind             = "VPCEndpointService"
	VPCEndpointService_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPCEndpointService_Kind}.String()
	VPCEndpointService_KindAPIVersion   = VPCEndpointService_Kind + "." + CRDGroupVersion.String()
	VPCEndpointService_GroupVersionKind = CRDGroupVersion.WithKind(VPCEndpointService_Kind)
)

func init() {
	SchemeBuilder.Register(&VPCEndpointService{}, &VPCEndpointServiceList{})
}
