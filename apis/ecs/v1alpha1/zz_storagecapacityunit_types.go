// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StorageCapacityUnitInitParameters struct {

	// The capacity of the Storage Capacity Unit. Unit: GiB. Valid values: 20, 40, 100, 200, 500, 1024, 2048, 5120, 10240, 20480, and 51200.
	Capacity *float64 `json:"capacity,omitempty" tf:"capacity,omitempty"`

	// The description of the Storage Capacity Unit. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The validity period of the Storage Capacity Unit. Default value: 1.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// The unit of the validity period of the Storage Capacity Unit. Default value: Month. Valid values: Month, Year.
	PeriodUnit *string `json:"periodUnit,omitempty" tf:"period_unit,omitempty"`

	// The time when the Storage Capacity Unit takes effect. It cannot be earlier than or more than six months later than the time when the Storage Capacity Unit is created. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. NOTE: This parameter is empty by default. The Storage Capacity Unit immediately takes effect after it is created.
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// The name of the Storage Capacity Unit.
	StorageCapacityUnitName *string `json:"storageCapacityUnitName,omitempty" tf:"storage_capacity_unit_name,omitempty"`
}

type StorageCapacityUnitObservation struct {

	// The capacity of the Storage Capacity Unit. Unit: GiB. Valid values: 20, 40, 100, 200, 500, 1024, 2048, 5120, 10240, 20480, and 51200.
	Capacity *float64 `json:"capacity,omitempty" tf:"capacity,omitempty"`

	// The description of the Storage Capacity Unit. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The validity period of the Storage Capacity Unit. Default value: 1.
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// The unit of the validity period of the Storage Capacity Unit. Default value: Month. Valid values: Month, Year.
	PeriodUnit *string `json:"periodUnit,omitempty" tf:"period_unit,omitempty"`

	// The time when the Storage Capacity Unit takes effect. It cannot be earlier than or more than six months later than the time when the Storage Capacity Unit is created. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. NOTE: This parameter is empty by default. The Storage Capacity Unit immediately takes effect after it is created.
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// The status of Storage Capacity Unit.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The name of the Storage Capacity Unit.
	StorageCapacityUnitName *string `json:"storageCapacityUnitName,omitempty" tf:"storage_capacity_unit_name,omitempty"`
}

type StorageCapacityUnitParameters struct {

	// The capacity of the Storage Capacity Unit. Unit: GiB. Valid values: 20, 40, 100, 200, 500, 1024, 2048, 5120, 10240, 20480, and 51200.
	// +kubebuilder:validation:Optional
	Capacity *float64 `json:"capacity,omitempty" tf:"capacity,omitempty"`

	// The description of the Storage Capacity Unit. The description must be 2 to 256 characters in length and cannot start with http:// or https://.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The validity period of the Storage Capacity Unit. Default value: 1.
	// +kubebuilder:validation:Optional
	Period *float64 `json:"period,omitempty" tf:"period,omitempty"`

	// The unit of the validity period of the Storage Capacity Unit. Default value: Month. Valid values: Month, Year.
	// +kubebuilder:validation:Optional
	PeriodUnit *string `json:"periodUnit,omitempty" tf:"period_unit,omitempty"`

	// The time when the Storage Capacity Unit takes effect. It cannot be earlier than or more than six months later than the time when the Storage Capacity Unit is created. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. NOTE: This parameter is empty by default. The Storage Capacity Unit immediately takes effect after it is created.
	// +kubebuilder:validation:Optional
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// The name of the Storage Capacity Unit.
	// +kubebuilder:validation:Optional
	StorageCapacityUnitName *string `json:"storageCapacityUnitName,omitempty" tf:"storage_capacity_unit_name,omitempty"`
}

// StorageCapacityUnitSpec defines the desired state of StorageCapacityUnit
type StorageCapacityUnitSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StorageCapacityUnitParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider StorageCapacityUnitInitParameters `json:"initProvider,omitempty"`
}

// StorageCapacityUnitStatus defines the observed state of StorageCapacityUnit.
type StorageCapacityUnitStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StorageCapacityUnitObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// StorageCapacityUnit is the Schema for the StorageCapacityUnits API. Provides a Alicloud ECS Storage Capacity Unit resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloud}
type StorageCapacityUnit struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.capacity) || (has(self.initProvider) && has(self.initProvider.capacity))",message="spec.forProvider.capacity is a required parameter"
	Spec   StorageCapacityUnitSpec   `json:"spec"`
	Status StorageCapacityUnitStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageCapacityUnitList contains a list of StorageCapacityUnits
type StorageCapacityUnitList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageCapacityUnit `json:"items"`
}

// Repository type metadata.
var (
	StorageCapacityUnit_Kind             = "StorageCapacityUnit"
	StorageCapacityUnit_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StorageCapacityUnit_Kind}.String()
	StorageCapacityUnit_KindAPIVersion   = StorageCapacityUnit_Kind + "." + CRDGroupVersion.String()
	StorageCapacityUnit_GroupVersionKind = CRDGroupVersion.WithKind(StorageCapacityUnit_Kind)
)

func init() {
	SchemeBuilder.Register(&StorageCapacityUnit{}, &StorageCapacityUnitList{})
}
