// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CommandInitParameters struct {

	// The Base64-encoded content of the command.
	CommandContent *string `json:"commandContent,omitempty" tf:"command_content,omitempty"`

	// The description of command.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies whether to use custom parameters in the command to be created. Default to: false.
	EnableParameter *bool `json:"enableParameter,omitempty" tf:"enable_parameter,omitempty"`

	// The name of the command, which supports all character sets. It can be up to 128 characters in length.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The timeout period that is specified for the command to be run on ECS instances. Unit: seconds. Default to: 60.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// The command type. Valid Values: RunBatScript, RunPowerShellScript and RunShellScript.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The execution path of the command in the ECS instance.
	WorkingDir *string `json:"workingDir,omitempty" tf:"working_dir,omitempty"`
}

type CommandObservation struct {

	// The Base64-encoded content of the command.
	CommandContent *string `json:"commandContent,omitempty" tf:"command_content,omitempty"`

	// The description of command.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies whether to use custom parameters in the command to be created. Default to: false.
	EnableParameter *bool `json:"enableParameter,omitempty" tf:"enable_parameter,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the command, which supports all character sets. It can be up to 128 characters in length.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The timeout period that is specified for the command to be run on ECS instances. Unit: seconds. Default to: 60.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// The command type. Valid Values: RunBatScript, RunPowerShellScript and RunShellScript.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The execution path of the command in the ECS instance.
	WorkingDir *string `json:"workingDir,omitempty" tf:"working_dir,omitempty"`
}

type CommandParameters struct {

	// The Base64-encoded content of the command.
	// +kubebuilder:validation:Optional
	CommandContent *string `json:"commandContent,omitempty" tf:"command_content,omitempty"`

	// The description of command.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Specifies whether to use custom parameters in the command to be created. Default to: false.
	// +kubebuilder:validation:Optional
	EnableParameter *bool `json:"enableParameter,omitempty" tf:"enable_parameter,omitempty"`

	// The name of the command, which supports all character sets. It can be up to 128 characters in length.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The timeout period that is specified for the command to be run on ECS instances. Unit: seconds. Default to: 60.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// The command type. Valid Values: RunBatScript, RunPowerShellScript and RunShellScript.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The execution path of the command in the ECS instance.
	// +kubebuilder:validation:Optional
	WorkingDir *string `json:"workingDir,omitempty" tf:"working_dir,omitempty"`
}

// CommandSpec defines the desired state of Command
type CommandSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CommandParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CommandInitParameters `json:"initProvider,omitempty"`
}

// CommandStatus defines the observed state of Command.
type CommandStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CommandObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Command is the Schema for the Commands API. Provides a Alicloud ECS Command resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloud}
type Command struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.commandContent) || (has(self.initProvider) && has(self.initProvider.commandContent))",message="spec.forProvider.commandContent is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   CommandSpec   `json:"spec"`
	Status CommandStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CommandList contains a list of Commands
type CommandList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Command `json:"items"`
}

// Repository type metadata.
var (
	Command_Kind             = "Command"
	Command_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Command_Kind}.String()
	Command_KindAPIVersion   = Command_Kind + "." + CRDGroupVersion.String()
	Command_GroupVersionKind = CRDGroupVersion.WithKind(Command_Kind)
)

func init() {
	SchemeBuilder.Register(&Command{}, &CommandList{})
}
