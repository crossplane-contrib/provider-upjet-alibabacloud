// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DedicatedHostClusterInitParameters struct {

	// The name of the dedicated host cluster. The name must be 2 to 128 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It must start with a letter. It cannot contain http:// or https://.
	DedicatedHostClusterName *string `json:"dedicatedHostClusterName,omitempty" tf:"dedicated_host_cluster_name,omitempty"`

	// The description of the dedicated host cluster. The description must be 2 to 256 characters in length. It cannot start with http:// or https://.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The dry run.
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// A mapping of tags to assign to the resource.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The ID of the zone in which to create the dedicated host cluster.
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type DedicatedHostClusterObservation struct {

	// The name of the dedicated host cluster. The name must be 2 to 128 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It must start with a letter. It cannot contain http:// or https://.
	DedicatedHostClusterName *string `json:"dedicatedHostClusterName,omitempty" tf:"dedicated_host_cluster_name,omitempty"`

	// The description of the dedicated host cluster. The description must be 2 to 256 characters in length. It cannot start with http:// or https://.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The dry run.
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A mapping of tags to assign to the resource.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The ID of the zone in which to create the dedicated host cluster.
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type DedicatedHostClusterParameters struct {

	// The name of the dedicated host cluster. The name must be 2 to 128 characters in length and can contain letters, digits, periods (.), underscores (_), and hyphens (-). It must start with a letter. It cannot contain http:// or https://.
	// +kubebuilder:validation:Optional
	DedicatedHostClusterName *string `json:"dedicatedHostClusterName,omitempty" tf:"dedicated_host_cluster_name,omitempty"`

	// The description of the dedicated host cluster. The description must be 2 to 256 characters in length. It cannot start with http:// or https://.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The dry run.
	// +kubebuilder:validation:Optional
	DryRun *bool `json:"dryRun,omitempty" tf:"dry_run,omitempty"`

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The ID of the zone in which to create the dedicated host cluster.
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

// DedicatedHostClusterSpec defines the desired state of DedicatedHostCluster
type DedicatedHostClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DedicatedHostClusterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DedicatedHostClusterInitParameters `json:"initProvider,omitempty"`
}

// DedicatedHostClusterStatus defines the observed state of DedicatedHostCluster.
type DedicatedHostClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DedicatedHostClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DedicatedHostCluster is the Schema for the DedicatedHostClusters API. Provides a Alicloud ECS Dedicated Host Cluster resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloud}
type DedicatedHostCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.zoneId) || (has(self.initProvider) && has(self.initProvider.zoneId))",message="spec.forProvider.zoneId is a required parameter"
	Spec   DedicatedHostClusterSpec   `json:"spec"`
	Status DedicatedHostClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DedicatedHostClusterList contains a list of DedicatedHostClusters
type DedicatedHostClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DedicatedHostCluster `json:"items"`
}

// Repository type metadata.
var (
	DedicatedHostCluster_Kind             = "DedicatedHostCluster"
	DedicatedHostCluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DedicatedHostCluster_Kind}.String()
	DedicatedHostCluster_KindAPIVersion   = DedicatedHostCluster_Kind + "." + CRDGroupVersion.String()
	DedicatedHostCluster_GroupVersionKind = CRDGroupVersion.WithKind(DedicatedHostCluster_Kind)
)

func init() {
	SchemeBuilder.Register(&DedicatedHostCluster{}, &DedicatedHostClusterList{})
}
