// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AutoSnapshotPolicyInitParameters struct {

	// The name of the automatic snapshot policy. The name must be 2 to 128 characters in length. The name must start with a letter and cannot start with http:// or https://. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).
	AutoSnapshotPolicyName *string `json:"autoSnapshotPolicyName,omitempty" tf:"auto_snapshot_policy_name,omitempty"`

	// The retention period of the snapshot copy in the destination region. Unit: days. Valid values:
	CopiedSnapshotsRetentionDays *float64 `json:"copiedSnapshotsRetentionDays,omitempty" tf:"copied_snapshots_retention_days,omitempty"`

	// The encryption parameters for cross-region snapshot replication. See copy_encryption_configuration below.
	CopyEncryptionConfiguration []CopyEncryptionConfigurationInitParameters `json:"copyEncryptionConfiguration,omitempty" tf:"copy_encryption_configuration,omitempty"`

	// Specifies whether to enable cross-region replication for snapshots. Valid values: true, false.
	EnableCrossRegionCopy *bool `json:"enableCrossRegionCopy,omitempty" tf:"enable_cross_region_copy,omitempty"`

	// The days of the week on which to create automatic snapshots. Valid values: 1 to 7, which correspond to the days of the week. For example, 1 indicates Monday. One or more days can be specified.
	RepeatWeekdays []*string `json:"repeatWeekdays,omitempty" tf:"repeat_weekdays,omitempty"`

	// The ID of the resource group. If this parameter is specified to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response.
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// The retention period of the automatic snapshots. Unit: days. Valid values:
	RetentionDays *float64 `json:"retentionDays,omitempty" tf:"retention_days,omitempty"`

	// A mapping of tags to assign to the resource.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The destination region to which to copy the snapshot. You can specify only a single destination region.
	// +listType=set
	TargetCopyRegions []*string `json:"targetCopyRegions,omitempty" tf:"target_copy_regions,omitempty"`

	// The points in time of the day at which to create automatic snapshots.
	TimePoints []*string `json:"timePoints,omitempty" tf:"time_points,omitempty"`
}

type AutoSnapshotPolicyObservation struct {

	// The name of the automatic snapshot policy. The name must be 2 to 128 characters in length. The name must start with a letter and cannot start with http:// or https://. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).
	AutoSnapshotPolicyName *string `json:"autoSnapshotPolicyName,omitempty" tf:"auto_snapshot_policy_name,omitempty"`

	// The retention period of the snapshot copy in the destination region. Unit: days. Valid values:
	CopiedSnapshotsRetentionDays *float64 `json:"copiedSnapshotsRetentionDays,omitempty" tf:"copied_snapshots_retention_days,omitempty"`

	// The encryption parameters for cross-region snapshot replication. See copy_encryption_configuration below.
	CopyEncryptionConfiguration []CopyEncryptionConfigurationObservation `json:"copyEncryptionConfiguration,omitempty" tf:"copy_encryption_configuration,omitempty"`

	// (Available since v1.236.0) The time when the automatic snapshot policy was created. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Specifies whether to enable cross-region replication for snapshots. Valid values: true, false.
	EnableCrossRegionCopy *bool `json:"enableCrossRegionCopy,omitempty" tf:"enable_cross_region_copy,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Available since v1.236.0) The region ID of the automatic snapshot policy.
	RegionID *string `json:"regionId,omitempty" tf:"region_id,omitempty"`

	// The days of the week on which to create automatic snapshots. Valid values: 1 to 7, which correspond to the days of the week. For example, 1 indicates Monday. One or more days can be specified.
	RepeatWeekdays []*string `json:"repeatWeekdays,omitempty" tf:"repeat_weekdays,omitempty"`

	// The ID of the resource group. If this parameter is specified to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response.
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// The retention period of the automatic snapshots. Unit: days. Valid values:
	RetentionDays *float64 `json:"retentionDays,omitempty" tf:"retention_days,omitempty"`

	// The status of the automatic snapshot policy.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// A mapping of tags to assign to the resource.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The destination region to which to copy the snapshot. You can specify only a single destination region.
	// +listType=set
	TargetCopyRegions []*string `json:"targetCopyRegions,omitempty" tf:"target_copy_regions,omitempty"`

	// The points in time of the day at which to create automatic snapshots.
	TimePoints []*string `json:"timePoints,omitempty" tf:"time_points,omitempty"`
}

type AutoSnapshotPolicyParameters struct {

	// The name of the automatic snapshot policy. The name must be 2 to 128 characters in length. The name must start with a letter and cannot start with http:// or https://. The name can contain letters, digits, colons (:), underscores (_), and hyphens (-).
	// +kubebuilder:validation:Optional
	AutoSnapshotPolicyName *string `json:"autoSnapshotPolicyName,omitempty" tf:"auto_snapshot_policy_name,omitempty"`

	// The retention period of the snapshot copy in the destination region. Unit: days. Valid values:
	// +kubebuilder:validation:Optional
	CopiedSnapshotsRetentionDays *float64 `json:"copiedSnapshotsRetentionDays,omitempty" tf:"copied_snapshots_retention_days,omitempty"`

	// The encryption parameters for cross-region snapshot replication. See copy_encryption_configuration below.
	// +kubebuilder:validation:Optional
	CopyEncryptionConfiguration []CopyEncryptionConfigurationParameters `json:"copyEncryptionConfiguration,omitempty" tf:"copy_encryption_configuration,omitempty"`

	// Specifies whether to enable cross-region replication for snapshots. Valid values: true, false.
	// +kubebuilder:validation:Optional
	EnableCrossRegionCopy *bool `json:"enableCrossRegionCopy,omitempty" tf:"enable_cross_region_copy,omitempty"`

	// The days of the week on which to create automatic snapshots. Valid values: 1 to 7, which correspond to the days of the week. For example, 1 indicates Monday. One or more days can be specified.
	// +kubebuilder:validation:Optional
	RepeatWeekdays []*string `json:"repeatWeekdays,omitempty" tf:"repeat_weekdays,omitempty"`

	// The ID of the resource group. If this parameter is specified to query resources, up to 1,000 resources that belong to the specified resource group can be displayed in the response.
	// +kubebuilder:validation:Optional
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// The retention period of the automatic snapshots. Unit: days. Valid values:
	// +kubebuilder:validation:Optional
	RetentionDays *float64 `json:"retentionDays,omitempty" tf:"retention_days,omitempty"`

	// A mapping of tags to assign to the resource.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The destination region to which to copy the snapshot. You can specify only a single destination region.
	// +kubebuilder:validation:Optional
	// +listType=set
	TargetCopyRegions []*string `json:"targetCopyRegions,omitempty" tf:"target_copy_regions,omitempty"`

	// The points in time of the day at which to create automatic snapshots.
	// +kubebuilder:validation:Optional
	TimePoints []*string `json:"timePoints,omitempty" tf:"time_points,omitempty"`
}

type CopyEncryptionConfigurationInitParameters struct {

	// Whether to enable encryption for cross-region snapshot replication. Default value: false. Valid values: true, false.
	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted,omitempty"`

	// The ID of the Key Management Service (KMS) key used to encrypt snapshots in cross-region snapshot replication.
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`
}

type CopyEncryptionConfigurationObservation struct {

	// Whether to enable encryption for cross-region snapshot replication. Default value: false. Valid values: true, false.
	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted,omitempty"`

	// The ID of the Key Management Service (KMS) key used to encrypt snapshots in cross-region snapshot replication.
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`
}

type CopyEncryptionConfigurationParameters struct {

	// Whether to enable encryption for cross-region snapshot replication. Default value: false. Valid values: true, false.
	// +kubebuilder:validation:Optional
	Encrypted *bool `json:"encrypted,omitempty" tf:"encrypted,omitempty"`

	// The ID of the Key Management Service (KMS) key used to encrypt snapshots in cross-region snapshot replication.
	// +kubebuilder:validation:Optional
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`
}

// AutoSnapshotPolicySpec defines the desired state of AutoSnapshotPolicy
type AutoSnapshotPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AutoSnapshotPolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AutoSnapshotPolicyInitParameters `json:"initProvider,omitempty"`
}

// AutoSnapshotPolicyStatus defines the observed state of AutoSnapshotPolicy.
type AutoSnapshotPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AutoSnapshotPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AutoSnapshotPolicy is the Schema for the AutoSnapshotPolicys API. Provides a Alicloud ECS Auto Snapshot Policy resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloud}
type AutoSnapshotPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.repeatWeekdays) || (has(self.initProvider) && has(self.initProvider.repeatWeekdays))",message="spec.forProvider.repeatWeekdays is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.retentionDays) || (has(self.initProvider) && has(self.initProvider.retentionDays))",message="spec.forProvider.retentionDays is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.timePoints) || (has(self.initProvider) && has(self.initProvider.timePoints))",message="spec.forProvider.timePoints is a required parameter"
	Spec   AutoSnapshotPolicySpec   `json:"spec"`
	Status AutoSnapshotPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AutoSnapshotPolicyList contains a list of AutoSnapshotPolicys
type AutoSnapshotPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AutoSnapshotPolicy `json:"items"`
}

// Repository type metadata.
var (
	AutoSnapshotPolicy_Kind             = "AutoSnapshotPolicy"
	AutoSnapshotPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AutoSnapshotPolicy_Kind}.String()
	AutoSnapshotPolicy_KindAPIVersion   = AutoSnapshotPolicy_Kind + "." + CRDGroupVersion.String()
	AutoSnapshotPolicy_GroupVersionKind = CRDGroupVersion.WithKind(AutoSnapshotPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&AutoSnapshotPolicy{}, &AutoSnapshotPolicyList{})
}
