// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ImageComponentInitParameters struct {

	// The component type. Supports mirrored build components and test components.
	ComponentType *string `json:"componentType,omitempty" tf:"component_type,omitempty"`

	// The component version number, which is used in conjunction with the component name, is in the format of major.minor.patch and is a non-negative integer.
	ComponentVersion *string `json:"componentVersion,omitempty" tf:"component_version,omitempty"`

	// Component content. Consists of multiple commands. The maximum number of commands cannot exceed 127. Details of supported commands and command formats,
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// Description information. It must be 2 to 256 characters in length and cannot start with http:// or https.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The component name. It must be 2 to 128 characters in length and start with an uppercase letter or a Chinese character. It cannot start with http:// or https. Can contain Chinese, English, numbers, half-length colons (:), underscores (_), half-length periods (.), or dashes (-).
	ImageComponentName *string `json:"imageComponentName,omitempty" tf:"image_component_name,omitempty"`

	// The ID of the enterprise resource group to which the created image component belongs.
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// The operating system supported by the component.
	SystemType *string `json:"systemType,omitempty" tf:"system_type,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ImageComponentObservation struct {

	// The component type. Supports mirrored build components and test components.
	ComponentType *string `json:"componentType,omitempty" tf:"component_type,omitempty"`

	// The component version number, which is used in conjunction with the component name, is in the format of major.minor.patch and is a non-negative integer.
	ComponentVersion *string `json:"componentVersion,omitempty" tf:"component_version,omitempty"`

	// Component content. Consists of multiple commands. The maximum number of commands cannot exceed 127. Details of supported commands and command formats,
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// Component creation time.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// Description information. It must be 2 to 256 characters in length and cannot start with http:// or https.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ID of the resource supplied above.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The component name. It must be 2 to 128 characters in length and start with an uppercase letter or a Chinese character. It cannot start with http:// or https. Can contain Chinese, English, numbers, half-length colons (:), underscores (_), half-length periods (.), or dashes (-).
	ImageComponentName *string `json:"imageComponentName,omitempty" tf:"image_component_name,omitempty"`

	// The ID of the enterprise resource group to which the created image component belongs.
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// The operating system supported by the component.
	SystemType *string `json:"systemType,omitempty" tf:"system_type,omitempty"`

	// Key-value map of resource tags.
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ImageComponentParameters struct {

	// The component type. Supports mirrored build components and test components.
	// +kubebuilder:validation:Optional
	ComponentType *string `json:"componentType,omitempty" tf:"component_type,omitempty"`

	// The component version number, which is used in conjunction with the component name, is in the format of major.minor.patch and is a non-negative integer.
	// +kubebuilder:validation:Optional
	ComponentVersion *string `json:"componentVersion,omitempty" tf:"component_version,omitempty"`

	// Component content. Consists of multiple commands. The maximum number of commands cannot exceed 127. Details of supported commands and command formats,
	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// Description information. It must be 2 to 256 characters in length and cannot start with http:// or https.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The component name. It must be 2 to 128 characters in length and start with an uppercase letter or a Chinese character. It cannot start with http:// or https. Can contain Chinese, English, numbers, half-length colons (:), underscores (_), half-length periods (.), or dashes (-).
	// +kubebuilder:validation:Optional
	ImageComponentName *string `json:"imageComponentName,omitempty" tf:"image_component_name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"-"`

	// The ID of the enterprise resource group to which the created image component belongs.
	// +kubebuilder:validation:Optional
	ResourceGroupID *string `json:"resourceGroupId,omitempty" tf:"resource_group_id,omitempty"`

	// The operating system supported by the component.
	// +kubebuilder:validation:Optional
	SystemType *string `json:"systemType,omitempty" tf:"system_type,omitempty"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ImageComponentSpec defines the desired state of ImageComponent
type ImageComponentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ImageComponentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ImageComponentInitParameters `json:"initProvider,omitempty"`
}

// ImageComponentStatus defines the observed state of ImageComponent.
type ImageComponentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ImageComponentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ImageComponent is the Schema for the ImageComponents API. Provides a Alicloud ECS Image Component resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type ImageComponent struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.content) || (has(self.initProvider) && has(self.initProvider.content))",message="spec.forProvider.content is a required parameter"
	Spec   ImageComponentSpec   `json:"spec"`
	Status ImageComponentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ImageComponentList contains a list of ImageComponents
type ImageComponentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ImageComponent `json:"items"`
}

// Repository type metadata.
var (
	ImageComponent_Kind             = "ImageComponent"
	ImageComponent_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ImageComponent_Kind}.String()
	ImageComponent_KindAPIVersion   = ImageComponent_Kind + "." + CRDGroupVersion.String()
	ImageComponent_GroupVersionKind = CRDGroupVersion.WithKind(ImageComponent_Kind)
)

func init() {
	SchemeBuilder.Register(&ImageComponent{}, &ImageComponentList{})
}
