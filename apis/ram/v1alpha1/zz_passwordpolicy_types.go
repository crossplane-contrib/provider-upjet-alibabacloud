// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PasswordPolicyInitParameters struct {

	// Whether to restrict logon after the password expires. Value:
	HardExpiry *bool `json:"hardExpiry,omitempty" tf:"hard_expiry,omitempty"`

	// Password retry constraint. After entering the wrong password continuously for the set number of times, the account will be locked for one hour.
	// Value range: 0~32.
	// Default value: 0, which means that the password retry constraint is not enabled.
	MaxLoginAttemps *float64 `json:"maxLoginAttemps,omitempty" tf:"max_login_attemps,omitempty"`

	// Password validity period.
	// Value range: 0~1095. Unit: days.
	// Default value: 0, which means never expires.
	MaxPasswordAge *float64 `json:"maxPasswordAge,omitempty" tf:"max_password_age,omitempty"`

	// The minimum number of unique characters in the password.
	// Valid values: 0 to 8.
	// The default value is 0, which indicates that no limits are imposed on the number of unique characters in a password.
	MinimumPasswordDifferentCharacter *float64 `json:"minimumPasswordDifferentCharacter,omitempty" tf:"minimum_password_different_character,omitempty"`

	// The minimum number of characters in the password.
	// Valid values: 8 to 32. Default value: 8.
	MinimumPasswordLength *float64 `json:"minimumPasswordLength,omitempty" tf:"minimum_password_length,omitempty"`

	// Whether the user name is not allowed in the password. Value:
	PasswordNotContainUserName *bool `json:"passwordNotContainUserName,omitempty" tf:"password_not_contain_user_name,omitempty"`

	// Historical password check policy.
	// Do not use the previous N Passwords. The value range of N is 0 to 24.
	// Default value: 0, indicating that the historical password check policy is not enabled.
	PasswordReusePrevention *float64 `json:"passwordReusePrevention,omitempty" tf:"password_reuse_prevention,omitempty"`

	// Specifies whether the password must contain lowercase letters. Valid values:
	RequireLowercaseCharacters *bool `json:"requireLowercaseCharacters,omitempty" tf:"require_lowercase_characters,omitempty"`

	// Specifies whether the password must contain digits. Valid values:
	RequireNumbers *bool `json:"requireNumbers,omitempty" tf:"require_numbers,omitempty"`

	// Specifies whether the password must contain special characters. Valid values:
	RequireSymbols *bool `json:"requireSymbols,omitempty" tf:"require_symbols,omitempty"`

	// Specifies whether the password must contain uppercase letters. Valid values:
	RequireUppercaseCharacters *bool `json:"requireUppercaseCharacters,omitempty" tf:"require_uppercase_characters,omitempty"`
}

type PasswordPolicyObservation struct {

	// Whether to restrict logon after the password expires. Value:
	HardExpiry *bool `json:"hardExpiry,omitempty" tf:"hard_expiry,omitempty"`

	// The ID of the resource supplied above. This field is set to your Alibaba Cloud Account ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Password retry constraint. After entering the wrong password continuously for the set number of times, the account will be locked for one hour.
	// Value range: 0~32.
	// Default value: 0, which means that the password retry constraint is not enabled.
	MaxLoginAttemps *float64 `json:"maxLoginAttemps,omitempty" tf:"max_login_attemps,omitempty"`

	// Password validity period.
	// Value range: 0~1095. Unit: days.
	// Default value: 0, which means never expires.
	MaxPasswordAge *float64 `json:"maxPasswordAge,omitempty" tf:"max_password_age,omitempty"`

	// The minimum number of unique characters in the password.
	// Valid values: 0 to 8.
	// The default value is 0, which indicates that no limits are imposed on the number of unique characters in a password.
	MinimumPasswordDifferentCharacter *float64 `json:"minimumPasswordDifferentCharacter,omitempty" tf:"minimum_password_different_character,omitempty"`

	// The minimum number of characters in the password.
	// Valid values: 8 to 32. Default value: 8.
	MinimumPasswordLength *float64 `json:"minimumPasswordLength,omitempty" tf:"minimum_password_length,omitempty"`

	// Whether the user name is not allowed in the password. Value:
	PasswordNotContainUserName *bool `json:"passwordNotContainUserName,omitempty" tf:"password_not_contain_user_name,omitempty"`

	// Historical password check policy.
	// Do not use the previous N Passwords. The value range of N is 0 to 24.
	// Default value: 0, indicating that the historical password check policy is not enabled.
	PasswordReusePrevention *float64 `json:"passwordReusePrevention,omitempty" tf:"password_reuse_prevention,omitempty"`

	// Specifies whether the password must contain lowercase letters. Valid values:
	RequireLowercaseCharacters *bool `json:"requireLowercaseCharacters,omitempty" tf:"require_lowercase_characters,omitempty"`

	// Specifies whether the password must contain digits. Valid values:
	RequireNumbers *bool `json:"requireNumbers,omitempty" tf:"require_numbers,omitempty"`

	// Specifies whether the password must contain special characters. Valid values:
	RequireSymbols *bool `json:"requireSymbols,omitempty" tf:"require_symbols,omitempty"`

	// Specifies whether the password must contain uppercase letters. Valid values:
	RequireUppercaseCharacters *bool `json:"requireUppercaseCharacters,omitempty" tf:"require_uppercase_characters,omitempty"`
}

type PasswordPolicyParameters struct {

	// Whether to restrict logon after the password expires. Value:
	// +kubebuilder:validation:Optional
	HardExpiry *bool `json:"hardExpiry,omitempty" tf:"hard_expiry,omitempty"`

	// Password retry constraint. After entering the wrong password continuously for the set number of times, the account will be locked for one hour.
	// Value range: 0~32.
	// Default value: 0, which means that the password retry constraint is not enabled.
	// +kubebuilder:validation:Optional
	MaxLoginAttemps *float64 `json:"maxLoginAttemps,omitempty" tf:"max_login_attemps,omitempty"`

	// Password validity period.
	// Value range: 0~1095. Unit: days.
	// Default value: 0, which means never expires.
	// +kubebuilder:validation:Optional
	MaxPasswordAge *float64 `json:"maxPasswordAge,omitempty" tf:"max_password_age,omitempty"`

	// The minimum number of unique characters in the password.
	// Valid values: 0 to 8.
	// The default value is 0, which indicates that no limits are imposed on the number of unique characters in a password.
	// +kubebuilder:validation:Optional
	MinimumPasswordDifferentCharacter *float64 `json:"minimumPasswordDifferentCharacter,omitempty" tf:"minimum_password_different_character,omitempty"`

	// The minimum number of characters in the password.
	// Valid values: 8 to 32. Default value: 8.
	// +kubebuilder:validation:Optional
	MinimumPasswordLength *float64 `json:"minimumPasswordLength,omitempty" tf:"minimum_password_length,omitempty"`

	// Whether the user name is not allowed in the password. Value:
	// +kubebuilder:validation:Optional
	PasswordNotContainUserName *bool `json:"passwordNotContainUserName,omitempty" tf:"password_not_contain_user_name,omitempty"`

	// Historical password check policy.
	// Do not use the previous N Passwords. The value range of N is 0 to 24.
	// Default value: 0, indicating that the historical password check policy is not enabled.
	// +kubebuilder:validation:Optional
	PasswordReusePrevention *float64 `json:"passwordReusePrevention,omitempty" tf:"password_reuse_prevention,omitempty"`

	// Specifies whether the password must contain lowercase letters. Valid values:
	// +kubebuilder:validation:Optional
	RequireLowercaseCharacters *bool `json:"requireLowercaseCharacters,omitempty" tf:"require_lowercase_characters,omitempty"`

	// Specifies whether the password must contain digits. Valid values:
	// +kubebuilder:validation:Optional
	RequireNumbers *bool `json:"requireNumbers,omitempty" tf:"require_numbers,omitempty"`

	// Specifies whether the password must contain special characters. Valid values:
	// +kubebuilder:validation:Optional
	RequireSymbols *bool `json:"requireSymbols,omitempty" tf:"require_symbols,omitempty"`

	// Specifies whether the password must contain uppercase letters. Valid values:
	// +kubebuilder:validation:Optional
	RequireUppercaseCharacters *bool `json:"requireUppercaseCharacters,omitempty" tf:"require_uppercase_characters,omitempty"`
}

// PasswordPolicySpec defines the desired state of PasswordPolicy
type PasswordPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PasswordPolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PasswordPolicyInitParameters `json:"initProvider,omitempty"`
}

// PasswordPolicyStatus defines the observed state of PasswordPolicy.
type PasswordPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PasswordPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PasswordPolicy is the Schema for the PasswordPolicys API. Provides a Alicloud RAM Password Policy resource.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alicloud}
type PasswordPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PasswordPolicySpec   `json:"spec"`
	Status            PasswordPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PasswordPolicyList contains a list of PasswordPolicys
type PasswordPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PasswordPolicy `json:"items"`
}

// Repository type metadata.
var (
	PasswordPolicy_Kind             = "PasswordPolicy"
	PasswordPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PasswordPolicy_Kind}.String()
	PasswordPolicy_KindAPIVersion   = PasswordPolicy_Kind + "." + CRDGroupVersion.String()
	PasswordPolicy_GroupVersionKind = CRDGroupVersion.WithKind(PasswordPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&PasswordPolicy{}, &PasswordPolicyList{})
}
