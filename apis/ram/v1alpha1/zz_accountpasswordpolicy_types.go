// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccountPasswordPolicyInitParameters struct {

	// Specifies if a password can expire in a hard way. Default to false.
	HardExpiry *bool `json:"hardExpiry,omitempty" tf:"hard_expiry,omitempty"`

	// Maximum logon attempts with an incorrect password within an hour. Valid value range: [0-32]. Default to 5.
	MaxLoginAttempts *float64 `json:"maxLoginAttempts,omitempty" tf:"max_login_attempts,omitempty"`

	// The number of days after which password expires. A value of 0 indicates that the password never expires. Valid value range: [0-1095]. Default to 0.
	MaxPasswordAge *float64 `json:"maxPasswordAge,omitempty" tf:"max_password_age,omitempty"`

	// Minimal required length of password for a user. Valid value range: [8-32]. Default to 12.
	MinimumPasswordLength *float64 `json:"minimumPasswordLength,omitempty" tf:"minimum_password_length,omitempty"`

	// User is not allowed to use the latest number of passwords specified in this parameter. A value of 0 indicates the password history check policy is disabled. Valid value range: [0-24]. Default to 0.
	PasswordReusePrevention *float64 `json:"passwordReusePrevention,omitempty" tf:"password_reuse_prevention,omitempty"`

	// Specifies if the occurrence of a lowercase character in the password is mandatory. Default to true.
	RequireLowercaseCharacters *bool `json:"requireLowercaseCharacters,omitempty" tf:"require_lowercase_characters,omitempty"`

	// Specifies if the occurrence of a number in the password is mandatory. Default to true.
	RequireNumbers *bool `json:"requireNumbers,omitempty" tf:"require_numbers,omitempty"`

	// Specifies if the occurrence of a special character in the password is mandatory. Default to true.
	RequireSymbols *bool `json:"requireSymbols,omitempty" tf:"require_symbols,omitempty"`

	// Specifies if the occurrence of an uppercase character in the password is mandatory. Default to true.
	RequireUppercaseCharacters *bool `json:"requireUppercaseCharacters,omitempty" tf:"require_uppercase_characters,omitempty"`
}

type AccountPasswordPolicyObservation struct {

	// Specifies if a password can expire in a hard way. Default to false.
	HardExpiry *bool `json:"hardExpiry,omitempty" tf:"hard_expiry,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Maximum logon attempts with an incorrect password within an hour. Valid value range: [0-32]. Default to 5.
	MaxLoginAttempts *float64 `json:"maxLoginAttempts,omitempty" tf:"max_login_attempts,omitempty"`

	// The number of days after which password expires. A value of 0 indicates that the password never expires. Valid value range: [0-1095]. Default to 0.
	MaxPasswordAge *float64 `json:"maxPasswordAge,omitempty" tf:"max_password_age,omitempty"`

	// Minimal required length of password for a user. Valid value range: [8-32]. Default to 12.
	MinimumPasswordLength *float64 `json:"minimumPasswordLength,omitempty" tf:"minimum_password_length,omitempty"`

	// User is not allowed to use the latest number of passwords specified in this parameter. A value of 0 indicates the password history check policy is disabled. Valid value range: [0-24]. Default to 0.
	PasswordReusePrevention *float64 `json:"passwordReusePrevention,omitempty" tf:"password_reuse_prevention,omitempty"`

	// Specifies if the occurrence of a lowercase character in the password is mandatory. Default to true.
	RequireLowercaseCharacters *bool `json:"requireLowercaseCharacters,omitempty" tf:"require_lowercase_characters,omitempty"`

	// Specifies if the occurrence of a number in the password is mandatory. Default to true.
	RequireNumbers *bool `json:"requireNumbers,omitempty" tf:"require_numbers,omitempty"`

	// Specifies if the occurrence of a special character in the password is mandatory. Default to true.
	RequireSymbols *bool `json:"requireSymbols,omitempty" tf:"require_symbols,omitempty"`

	// Specifies if the occurrence of an uppercase character in the password is mandatory. Default to true.
	RequireUppercaseCharacters *bool `json:"requireUppercaseCharacters,omitempty" tf:"require_uppercase_characters,omitempty"`
}

type AccountPasswordPolicyParameters struct {

	// Specifies if a password can expire in a hard way. Default to false.
	// +kubebuilder:validation:Optional
	HardExpiry *bool `json:"hardExpiry,omitempty" tf:"hard_expiry,omitempty"`

	// Maximum logon attempts with an incorrect password within an hour. Valid value range: [0-32]. Default to 5.
	// +kubebuilder:validation:Optional
	MaxLoginAttempts *float64 `json:"maxLoginAttempts,omitempty" tf:"max_login_attempts,omitempty"`

	// The number of days after which password expires. A value of 0 indicates that the password never expires. Valid value range: [0-1095]. Default to 0.
	// +kubebuilder:validation:Optional
	MaxPasswordAge *float64 `json:"maxPasswordAge,omitempty" tf:"max_password_age,omitempty"`

	// Minimal required length of password for a user. Valid value range: [8-32]. Default to 12.
	// +kubebuilder:validation:Optional
	MinimumPasswordLength *float64 `json:"minimumPasswordLength,omitempty" tf:"minimum_password_length,omitempty"`

	// User is not allowed to use the latest number of passwords specified in this parameter. A value of 0 indicates the password history check policy is disabled. Valid value range: [0-24]. Default to 0.
	// +kubebuilder:validation:Optional
	PasswordReusePrevention *float64 `json:"passwordReusePrevention,omitempty" tf:"password_reuse_prevention,omitempty"`

	// Specifies if the occurrence of a lowercase character in the password is mandatory. Default to true.
	// +kubebuilder:validation:Optional
	RequireLowercaseCharacters *bool `json:"requireLowercaseCharacters,omitempty" tf:"require_lowercase_characters,omitempty"`

	// Specifies if the occurrence of a number in the password is mandatory. Default to true.
	// +kubebuilder:validation:Optional
	RequireNumbers *bool `json:"requireNumbers,omitempty" tf:"require_numbers,omitempty"`

	// Specifies if the occurrence of a special character in the password is mandatory. Default to true.
	// +kubebuilder:validation:Optional
	RequireSymbols *bool `json:"requireSymbols,omitempty" tf:"require_symbols,omitempty"`

	// Specifies if the occurrence of an uppercase character in the password is mandatory. Default to true.
	// +kubebuilder:validation:Optional
	RequireUppercaseCharacters *bool `json:"requireUppercaseCharacters,omitempty" tf:"require_uppercase_characters,omitempty"`
}

// AccountPasswordPolicySpec defines the desired state of AccountPasswordPolicy
type AccountPasswordPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccountPasswordPolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AccountPasswordPolicyInitParameters `json:"initProvider,omitempty"`
}

// AccountPasswordPolicyStatus defines the observed state of AccountPasswordPolicy.
type AccountPasswordPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccountPasswordPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AccountPasswordPolicy is the Schema for the AccountPasswordPolicys API. Provides a RAM password policy configuration for entire account.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,alibabacloud}
type AccountPasswordPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AccountPasswordPolicySpec   `json:"spec"`
	Status            AccountPasswordPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccountPasswordPolicyList contains a list of AccountPasswordPolicys
type AccountPasswordPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccountPasswordPolicy `json:"items"`
}

// Repository type metadata.
var (
	AccountPasswordPolicy_Kind             = "AccountPasswordPolicy"
	AccountPasswordPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AccountPasswordPolicy_Kind}.String()
	AccountPasswordPolicy_KindAPIVersion   = AccountPasswordPolicy_Kind + "." + CRDGroupVersion.String()
	AccountPasswordPolicy_GroupVersionKind = CRDGroupVersion.WithKind(AccountPasswordPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&AccountPasswordPolicy{}, &AccountPasswordPolicyList{})
}
