// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this AccessKey.
func (mg *AccessKey) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserName),
		Extract:      resource.ExtractParamPath("name", false),
		Reference:    mg.Spec.ForProvider.UserNameRef,
		Selector:     mg.Spec.ForProvider.UserNameSelector,
		To: reference.To{
			List:    &UserList{},
			Managed: &User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserName")
	}
	mg.Spec.ForProvider.UserName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserName),
		Extract:      resource.ExtractParamPath("name", false),
		Reference:    mg.Spec.InitProvider.UserNameRef,
		Selector:     mg.Spec.InitProvider.UserNameSelector,
		To: reference.To{
			List:    &UserList{},
			Managed: &User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserName")
	}
	mg.Spec.InitProvider.UserName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this GroupMembership.
func (mg *GroupMembership) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GroupName),
		Extract:      resource.ExtractParamPath("name", false),
		Reference:    mg.Spec.ForProvider.GroupNameRef,
		Selector:     mg.Spec.ForProvider.GroupNameSelector,
		To: reference.To{
			List:    &GroupList{},
			Managed: &Group{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GroupName")
	}
	mg.Spec.ForProvider.GroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GroupNameRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.UserNames),
		Extract:       resource.ExtractParamPath("name", false),
		References:    mg.Spec.ForProvider.UserNamesRefs,
		Selector:      mg.Spec.ForProvider.UserNamesSelector,
		To: reference.To{
			List:    &UserList{},
			Managed: &User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserNames")
	}
	mg.Spec.ForProvider.UserNames = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.UserNamesRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GroupName),
		Extract:      resource.ExtractParamPath("name", false),
		Reference:    mg.Spec.InitProvider.GroupNameRef,
		Selector:     mg.Spec.InitProvider.GroupNameSelector,
		To: reference.To{
			List:    &GroupList{},
			Managed: &Group{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GroupName")
	}
	mg.Spec.InitProvider.GroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.GroupNameRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.UserNames),
		Extract:       resource.ExtractParamPath("name", false),
		References:    mg.Spec.InitProvider.UserNamesRefs,
		Selector:      mg.Spec.InitProvider.UserNamesSelector,
		To: reference.To{
			List:    &UserList{},
			Managed: &User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserNames")
	}
	mg.Spec.InitProvider.UserNames = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.UserNamesRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this GroupPolicyAttachment.
func (mg *GroupPolicyAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GroupName),
		Extract:      resource.ExtractParamPath("name", false),
		Reference:    mg.Spec.ForProvider.GroupNameRef,
		Selector:     mg.Spec.ForProvider.GroupNameSelector,
		To: reference.To{
			List:    &GroupList{},
			Managed: &Group{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GroupName")
	}
	mg.Spec.ForProvider.GroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GroupNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PolicyName),
		Extract:      resource.ExtractParamPath("policy_name", false),
		Reference:    mg.Spec.ForProvider.PolicyNameRef,
		Selector:     mg.Spec.ForProvider.PolicyNameSelector,
		To: reference.To{
			List:    &PolicyList{},
			Managed: &Policy{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PolicyName")
	}
	mg.Spec.ForProvider.PolicyName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PolicyNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PolicyType),
		Extract:      resource.ExtractParamPath("type", true),
		Reference:    mg.Spec.ForProvider.PolicyTypeRef,
		Selector:     mg.Spec.ForProvider.PolicyTypeSelector,
		To: reference.To{
			List:    &PolicyList{},
			Managed: &Policy{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PolicyType")
	}
	mg.Spec.ForProvider.PolicyType = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PolicyTypeRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GroupName),
		Extract:      resource.ExtractParamPath("name", false),
		Reference:    mg.Spec.InitProvider.GroupNameRef,
		Selector:     mg.Spec.InitProvider.GroupNameSelector,
		To: reference.To{
			List:    &GroupList{},
			Managed: &Group{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GroupName")
	}
	mg.Spec.InitProvider.GroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.GroupNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PolicyName),
		Extract:      resource.ExtractParamPath("policy_name", false),
		Reference:    mg.Spec.InitProvider.PolicyNameRef,
		Selector:     mg.Spec.InitProvider.PolicyNameSelector,
		To: reference.To{
			List:    &PolicyList{},
			Managed: &Policy{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PolicyName")
	}
	mg.Spec.InitProvider.PolicyName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PolicyNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PolicyType),
		Extract:      resource.ExtractParamPath("type", true),
		Reference:    mg.Spec.InitProvider.PolicyTypeRef,
		Selector:     mg.Spec.InitProvider.PolicyTypeSelector,
		To: reference.To{
			List:    &PolicyList{},
			Managed: &Policy{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PolicyType")
	}
	mg.Spec.InitProvider.PolicyType = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PolicyTypeRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LoginProfile.
func (mg *LoginProfile) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserName),
		Extract:      resource.ExtractParamPath("name", false),
		Reference:    mg.Spec.ForProvider.UserNameRef,
		Selector:     mg.Spec.ForProvider.UserNameSelector,
		To: reference.To{
			List:    &UserList{},
			Managed: &User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserName")
	}
	mg.Spec.ForProvider.UserName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserName),
		Extract:      resource.ExtractParamPath("name", false),
		Reference:    mg.Spec.InitProvider.UserNameRef,
		Selector:     mg.Spec.InitProvider.UserNameSelector,
		To: reference.To{
			List:    &UserList{},
			Managed: &User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserName")
	}
	mg.Spec.InitProvider.UserName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RolePolicyAttachment.
func (mg *RolePolicyAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PolicyName),
		Extract:      resource.ExtractParamPath("policy_name", false),
		Reference:    mg.Spec.ForProvider.PolicyNameRef,
		Selector:     mg.Spec.ForProvider.PolicyNameSelector,
		To: reference.To{
			List:    &PolicyList{},
			Managed: &Policy{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PolicyName")
	}
	mg.Spec.ForProvider.PolicyName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PolicyNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PolicyType),
		Extract:      resource.ExtractParamPath("type", true),
		Reference:    mg.Spec.ForProvider.PolicyTypeRef,
		Selector:     mg.Spec.ForProvider.PolicyTypeSelector,
		To: reference.To{
			List:    &PolicyList{},
			Managed: &Policy{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PolicyType")
	}
	mg.Spec.ForProvider.PolicyType = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PolicyTypeRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RoleName),
		Extract:      resource.ExtractParamPath("name", false),
		Reference:    mg.Spec.ForProvider.RoleNameRef,
		Selector:     mg.Spec.ForProvider.RoleNameSelector,
		To: reference.To{
			List:    &RoleList{},
			Managed: &Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RoleName")
	}
	mg.Spec.ForProvider.RoleName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RoleNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PolicyName),
		Extract:      resource.ExtractParamPath("policy_name", false),
		Reference:    mg.Spec.InitProvider.PolicyNameRef,
		Selector:     mg.Spec.InitProvider.PolicyNameSelector,
		To: reference.To{
			List:    &PolicyList{},
			Managed: &Policy{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PolicyName")
	}
	mg.Spec.InitProvider.PolicyName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PolicyNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PolicyType),
		Extract:      resource.ExtractParamPath("type", true),
		Reference:    mg.Spec.InitProvider.PolicyTypeRef,
		Selector:     mg.Spec.InitProvider.PolicyTypeSelector,
		To: reference.To{
			List:    &PolicyList{},
			Managed: &Policy{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PolicyType")
	}
	mg.Spec.InitProvider.PolicyType = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PolicyTypeRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RoleName),
		Extract:      resource.ExtractParamPath("name", false),
		Reference:    mg.Spec.InitProvider.RoleNameRef,
		Selector:     mg.Spec.InitProvider.RoleNameSelector,
		To: reference.To{
			List:    &RoleList{},
			Managed: &Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RoleName")
	}
	mg.Spec.InitProvider.RoleName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RoleNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this UserGroupAttachment.
func (mg *UserGroupAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GroupName),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.GroupNameRef,
		Selector:     mg.Spec.ForProvider.GroupNameSelector,
		To: reference.To{
			List:    &GroupList{},
			Managed: &Group{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GroupName")
	}
	mg.Spec.ForProvider.GroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GroupNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserName),
		Extract:      resource.ExtractParamPath("name", false),
		Reference:    mg.Spec.ForProvider.UserNameRef,
		Selector:     mg.Spec.ForProvider.UserNameSelector,
		To: reference.To{
			List:    &UserList{},
			Managed: &User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserName")
	}
	mg.Spec.ForProvider.UserName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GroupName),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.GroupNameRef,
		Selector:     mg.Spec.InitProvider.GroupNameSelector,
		To: reference.To{
			List:    &GroupList{},
			Managed: &Group{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GroupName")
	}
	mg.Spec.InitProvider.GroupName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.GroupNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserName),
		Extract:      resource.ExtractParamPath("name", false),
		Reference:    mg.Spec.InitProvider.UserNameRef,
		Selector:     mg.Spec.InitProvider.UserNameSelector,
		To: reference.To{
			List:    &UserList{},
			Managed: &User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserName")
	}
	mg.Spec.InitProvider.UserName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserNameRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this UserPolicyAttachment.
func (mg *UserPolicyAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PolicyName),
		Extract:      resource.ExtractParamPath("policy_name", false),
		Reference:    mg.Spec.ForProvider.PolicyNameRef,
		Selector:     mg.Spec.ForProvider.PolicyNameSelector,
		To: reference.To{
			List:    &PolicyList{},
			Managed: &Policy{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PolicyName")
	}
	mg.Spec.ForProvider.PolicyName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PolicyNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PolicyType),
		Extract:      resource.ExtractParamPath("type", true),
		Reference:    mg.Spec.ForProvider.PolicyTypeRef,
		Selector:     mg.Spec.ForProvider.PolicyTypeSelector,
		To: reference.To{
			List:    &PolicyList{},
			Managed: &Policy{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PolicyType")
	}
	mg.Spec.ForProvider.PolicyType = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PolicyTypeRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserName),
		Extract:      resource.ExtractParamPath("name", false),
		Reference:    mg.Spec.ForProvider.UserNameRef,
		Selector:     mg.Spec.ForProvider.UserNameSelector,
		To: reference.To{
			List:    &UserList{},
			Managed: &User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserName")
	}
	mg.Spec.ForProvider.UserName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PolicyName),
		Extract:      resource.ExtractParamPath("policy_name", false),
		Reference:    mg.Spec.InitProvider.PolicyNameRef,
		Selector:     mg.Spec.InitProvider.PolicyNameSelector,
		To: reference.To{
			List:    &PolicyList{},
			Managed: &Policy{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PolicyName")
	}
	mg.Spec.InitProvider.PolicyName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PolicyNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PolicyType),
		Extract:      resource.ExtractParamPath("type", true),
		Reference:    mg.Spec.InitProvider.PolicyTypeRef,
		Selector:     mg.Spec.InitProvider.PolicyTypeSelector,
		To: reference.To{
			List:    &PolicyList{},
			Managed: &Policy{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PolicyType")
	}
	mg.Spec.InitProvider.PolicyType = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PolicyTypeRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserName),
		Extract:      resource.ExtractParamPath("name", false),
		Reference:    mg.Spec.InitProvider.UserNameRef,
		Selector:     mg.Spec.InitProvider.UserNameSelector,
		To: reference.To{
			List:    &UserList{},
			Managed: &User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserName")
	}
	mg.Spec.InitProvider.UserName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserNameRef = rsp.ResolvedReference

	return nil
}
